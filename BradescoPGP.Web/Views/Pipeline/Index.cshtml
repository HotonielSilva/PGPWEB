@model List<BradescoPGP.Web.Models.PipelineViewModel>
@using BradescoPGP.Common
<div class="box box-danger m-b-5">
    <div class="box-header">
        <h3 class="box-title">Busca Rápida</h3>
        <div class="box-tools pull-right">
            <button type="button" class="btn btn-box-tool" data-widget="collapse">
                <i class="fa fa-minus"></i>
            </button>
        </div>
    </div>
    <div class="box-body with-border">
        <form action="@Url.Action("Index","Pipeline")" id="form-pesquisa-pipeline" method="get">

            <div class="form-inline custom-search-inputs">
                <div class="row relative" id="search-pipe">
                    <div class="col-lg-2 col-md-2 col-sm-6 col-xs-12 m-b-10">
                        <div class="form-group">
                            <label for="especialista">Especialista</label>
                            @Html.DropDownList("especialista", (List<SelectListItem>)ViewBag.Especialistas, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            <label for="agencia">Agencia</label>
                            <input type="number" value="@Request.Params.Get("agencia")" id="agencia" name="agencia" class="form-control" />
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            <label for="conta">Conta</label>
                            <input type="number" value="@Request.Params.Get("conta")" id="conta" name="conta" class="form-control" />
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <label for="situacao">Situação</label><br />
                        @Html.DropDownList("situacao", (List<SelectListItem>)ViewBag.Status, new { @class = "form-control" })
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            <label for="de">De&nbsp;</label>
                            <input type="date" value="@Request.Params.Get("de")" id="de" name="de" width="30" class="form-control" /><br />
                        </div>
                    </div>
                    <div class="col-lg-2" style="float:left;">
                        <div class="form-group">
                            <label for="ate">Até</label>
                            <input type="date" value="@Request.Params.Get("ate")" id="ate" name="ate" class="form-control" />
                        </div>
                    </div>
                </div>
                <div class="row relative">
                    @if (!User.IsInRole(NivelAcesso.Especialista.ToString()))
                    {
                        <div class="col-lg-2 col-md-2 col-sm-6 col-xs-12 m-b-10">
                            <div class="form-group">
                                <label for="equipe">Equipe</label>
                                @Html.DropDownList("equipe", (List<SelectListItem>)ViewBag.Equipes, new { @class = "form-control" })
                            </div>
                        </div>
                    }
                    <div class="col-lg-2 col-md-2 col-sm-12 col-xs-12 pull-right">
                        <br />
                        <div class="pull-right">
                            <button type="submit" id="btn-search" class="btn btn-danger">Buscar</button>
                            <a href="@Url.Action("Index","Pipeline")" class="btn btn-default">Limpar filtros</a>
                        </div>
                    </div>
                </div>


            </div>
        </form>
    </div>
</div>

<div class="row">
    <div class="col-lg-12">
        <div class="box no-border">
            <div class="box-body">

                <table id="table-pipelines" class="table table-hover display">
                    <thead>
                        <tr>
                            <th>Especialista</th>
                            <th>Cliente</th>
                            <th>Agencia</th>
                            <th>Conta</th>
                            <th>Origem</th>
                            <th>Situação</th>
                            <th>Bradesco Principal</th>
                            <th>Valores no Mercado</th>
                            <th>Valor do Pipeline</th>
                            <th>Data Prevista</th>
                            <th>Valor Aplicado</th>
                            <th>Motivo</th>
                            <th>Data Prorrogada</th>
                            <th>Observações</th>
                            <th>Resetar Status</th>
                            <th>Editar</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var pipeline in Model.OrderBy(p => p.Especialista))
                        {

                            <tr id="@pipeline.Id" ondblclick="redirecionarHome(this)">
                                <td>@pipeline.Especialista</td>
                                <td>@pipeline.Cliente</td>
                                <td>@pipeline.Agencia</td>
                                <td>@pipeline.Conta</td>
                                <td>@pipeline.Origem</td>
                                <td>@pipeline.Situacao</td>
                                @if (pipeline.BradescoPrincipalBanco)
                                {
                                    <td>Sim</td>
                                }
                                else
                                {
                                    <td>Não</td>
                                }

                                @if (pipeline.ValorMercado.HasValue)
                                {

                                    <td>@pipeline.ValorMercado.Value</td>
                                }
                                else
                                {
                                    <td></td>
                                }
                                <td>@pipeline.ValorDoPipe</td>
                                <td>@pipeline.DataPrevista.ToString("dd/MM/yyyy")</td>

                                <td>@pipeline.ValorAplicado</td>
                               
                                <td>@pipeline.Motivo</td>

                                
                                    <td>@(pipeline.DataProrrogada?.ToString("dd/MM/yyyy"))</td>
                                

                                <td>@(pipeline?.Comentario)</td>
                                <td class="text-center">
                                    <button onclick="core.home.resetStatus(this, '@Url.Action("ResetarStatus","Pipeline")', 'Pipeline')" style="background-color:unset;border:unset"
                                            title="Resetar Status para Em Branco" class="btn btn-default">
                                        <i class="fa fa-undo"></i>
                                    </button>
                                </td>
                                <td class="text-center">
                                    <button class="btn-edit-pencil" id="@pipeline.Id" onclick="core.home.getPipe(this.id, '@Url.Action("AtualizarPipeline", "Pipeline")', '@Url.Action("ObterPipe", "Pipeline")', '@Request.Url.PathAndQuery')"><i class="fa fa-pencil" style="color:red"></i></button><br />
                                </td>
                            </tr>

                        }
                    </tbody>
                </table>
                @if (Model.Any())
                {
                    <a class="btn btn-sm btn-success" href="#" onclick="exportarExcel()"> <i class="fa fa-table"></i> Exportar Excel</a>
                }
            </div>
        </div>
    </div>
</div>

@Html.DropDownList("OrigemId", (List<SelectListItem>)ViewBag.Origens, new { @class = "form-control none" })
@Html.DropDownList("MotivoId", (List<SelectListItem>)ViewBag.Motivos, new { @class = "form-control none" })
@Html.DropDownList("Status", (List<SelectListItem>)ViewBag.Status, new { @class = "form-control none" })

@section scripts{
    <script>
        function redirecionarHome(ele) {
            $(ele).css({ 'background-color': '#f69595'})
            var agencia = $($(ele).children()[2]).text()
            var conta = $($(ele).children()[3]).text()
            window.location.href = '@Url.Action("RedirecionarHome", "Home")?agencia=' + agencia + '&conta=' + conta;
        }

        function exportarExcel() {
            var especialista = '@Request.Params.Get("especialista")';
            var agencia = '@Request.Params.Get("agencia")';
            var conta = '@Request.Params.Get("conta")';
            var situacao = '@Request.Params.Get("situacao")';
            var de = '@Request.Params.Get("de")';
            var ate = '@Request.Params.Get("ate")';
            var equipe = '@Request.Params.Get("equipe")';

            var link = `@Url.Action("ExportarExcel", "Pipeline")?especialista=@Html.Raw(Request.Params.Get("especialista"))&agencia=${agencia}&conta=${conta}&situacao=${situacao}&equipe=${equipe}&de=${de}&ate=${ate}`;
            window.open(link, '_blank');
        }

        $(document).ready(() => {

            core.home.efeitoSelecaoLinha('#table-pipelines');

            //DataTable
            $('#table-pipelines').DataTable({
                language: {
                    "lengthMenu": "Mostrar _MENU_ resultados por página",
                    "zeroRecords": "Nenhum registro encontrado",
                    "info": "Foram encontrados _TOTAL_ resultados",
                    "infoFiltered": "(A pesquisa retornou _TOTAL_ resultados do total de _MAX_)",
                    "infoEmpty": "Nehum dado disponivel",
                    "oPaginate": {
                        "sNext": "Próximo",
                        "sPrevious": "Anterior",
                        "sFirst": "Primeiro",
                        "sLast": "Último"
                    },
                },
                scrollX: true,
                searching: false,
                order: [9, 'desc'],
                lengthMenu: [25, 50, 100],
                columns: [
                    {data: 'Especialista'},
                    { data: 'Cliente'},
                    { data: 'Agencia'},
                    { data: 'Conta'},
                    { data: 'Origem'},
                    { data: 'Situação'},
                    { data: 'Bradesco é o Principal Banco'},
                    {
                        data: 'Valores no Mercado',
                        render: function (data, type, row) {
                            if (type == 'display') {
                                return data != '' ? parseFloat(data).toLocaleString('pt-BR', { currency: 'BRL', style: 'currency' }): data;
                            }
                            else {
                                return parseFloat(data.replace(',', '.'));
                            }
                        }
                    },
                    {
                        data: 'Valor do Pipeline',
                        render: function (data, type, row) {
                            if (type == 'display') {
                                return parseFloat(data.replace(',','.')).toLocaleString('pt-BR', { currency: 'BRL', style: 'currency' });
                            }
                            else {
                                return parseFloat(data.replace(',', '.'));
                            }
                        }
                    },
                    {
                        data: 'Data Prevista de Entrada',
                        render: function (data, type, row) {
                            if (type == 'display') {
                                return data;
                            }
                            else {
                                return moment(data, 'DD/MM/YYYY').toDate();
                            }
                        }
                    },
                    {
                        data: 'Valor Aplicado',
                        render: function (data, type, row) {
                            if (type == 'display') {
                                return data != '' ? parseFloat(data).toLocaleString('pt-BR', { currency: 'BRL', style: 'currency' }) : data;
                            }
                            else {
                                return parseFloat(data.replace(',', '.'));
                            }
                        }
                    },

                    { data: 'Motivo' },

                    {
                        data: 'Data Prorrogada',
                        render: function (data, type, row) {
                            if (type == 'display') {
                                return data;
                            }
                            else {
                                return data != "" ? moment(data, 'DD/MM/YYYY').toDate() : data;
                            }
                        }
                    },

                    { data: 'Observações' },
                    {data: 'Resetar Status'},
                    {data: 'Editar'}
                ],
                columnDefs: [
                    { width: '200px', targets: 0 },
                    { width: '180px', targets: 1 },
                    { width: '110px', targets: 5 },
                    { width: '150px', targets: 7 },
                    { width: '150px', targets: 8 },
                    { width: '100px', targets: 11 },
                    { width: '200px', targets: 13 },
                ],
            })

            //Validações formulario
            $('#form-pesquisa-pipeline').submit(function(e){
                var especialista = $('#especialista').val();
                var agencia = $('#agencia').val();
                var conta = $('#conta').val();
                var situacao = $('#situacao').val();
                var de = $('#de').val();
                var ate = $('#ate').val();
                var equipe = $('#equipe').val();

                if (conta == "" && agencia == "" && (especialista == "" || especialista == null) && de == "" && ate == "" && (situacao == "" || situacao == null) && equipe == "") {
                    e.preventDefault();
                    core.notify.showNotify("Para realizar um filtro preencha os campos desejados abaixo", 'warning', 'top-center');
                    return;
                }

                if (de > ate) {
                    e.preventDefault();
                    core.notify.showNotify("O range de data está inválido, o valor do campo <b>De</b> é maior do que o campo <b>Até</b>", 'warning', 'top-center');
                    return;
                }
            })
        })
    </script>
}