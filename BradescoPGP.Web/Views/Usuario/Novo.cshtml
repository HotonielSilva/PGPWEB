@model BradescoPGP.Web.Models.UsuarioViewModel
@{
    ViewBag.Title = "Novo";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="box box-danger m-b-5">
    <form action="@Url.Action("Novo", "Usuario")" method="post">
        <div class="box-body with-border">
            <div class="form-inline custom-search-inputs">
                <div class="row relative">
                    <div id="main-search">
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 m-b-10">
                            <div class="form-group">
                                @Html.LabelFor(m => m.Nome) <br class="hidden-md hidden-sm hidden-xs" />
                                @Html.TextBoxFor(m => m.Nome, new { @class = "form-control" })
                                <br />
                                @Html.ValidationMessageFor(m => m.Nome, null, new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 m-b-10">
                            <div class="form-group">
                                @Html.LabelFor(m => m.Matricula) <br class="hidden-md hidden-sm hidden-xs" />
                                @Html.TextBoxFor(m => m.Matricula, new { @class = "form-control", @type = "number" })
                                <br />
                                @Html.ValidationMessageFor(m => m.Matricula, null, new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 m-b-10">
                            <div class="form-group">
                                <label>Código Usuário</label> <br class="hidden-md hidden-sm hidden-xs" />
                                @Html.TextBoxFor(m => m.NomeUsuario, new { @class = "form-control", @readonly = "readonly" })
                                <br />
                                @Html.ValidationMessageFor(m => m.NomeUsuario, null, new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 m-b-10">
                            <div class="form-group">
                                @Html.LabelFor(m => m.Perfil) <br class="hidden-md hidden-sm hidden-xs" />
                                @Html.DropDownListFor(m => m.PerfilId, ViewData["Perfil"] as SelectList, new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 m-b-10">
                            <div class="form-group">
                                @Html.LabelFor(m => m.NomeSupervisor) <br class="hidden-md hidden-sm hidden-xs" />
                                @Html.DropDownList("NomeSupervisor", (SelectList)ViewData["Supervisores"], new { @class = "form-control" })
                                <br />
                                @Html.ValidationMessageFor(m => m.NomeSupervisor, null, new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 m-b-10">
                            <div class="form-group">
                                @Html.LabelFor(m => m.MatriculaSupervisor) <br class="hidden-md hidden-sm hidden-xs" />
                                @Html.TextBoxFor(m => m.MatriculaSupervisor, new { @class = "form-control", @readonly = "readonly" })
                                <br />
                                @Html.ValidationMessageFor(m => m.MatriculaSupervisor, null, new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 m-b-10">
                            <div class="form-group">
                                @Html.LabelFor(m => m.Equipe) <br class="hidden-md hidden-sm hidden-xs" />
                                @Html.DropDownList("Equipe", (List<SelectListItem>)ViewBag.Equipes, new { @class = "form-control" })
                                <br />
                                @Html.ValidationMessageFor(m => m.Equipe, null, new { @class = "text-danger" })
                            </div>
                        </div>


                        @*<div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 m-b-10">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.TipoUsuario) <br class="hidden-md hidden-sm hidden-xs" />
                                    <select class="form-control" name="TipoUsuario">
                                        <option value="Ativo">Ativo</option>
                                        <option value="Receptivo">Receptivo</option>
                                    </select>
                                </div>
                            </div>*@
                        <div class="col-lg-4 col-md-4 col-sm-12 col-xs-12 pull-right">
                            <div class="pull-right">
                                @if (ViewBag.error != null)
                                {
                                    <label class="text-danger mr-4">@Html.Raw(ViewBag.error)</label>
                                }
                                <a href="@Url.Action("Perfil", "Usuario")" class="btn btn-danger">Voltar</a>
                                <button class="btn btn-success">Criar</button>
                            </div>
                        </div>


                    </div>
                </div>
            </div>
        </div>
    </form>
</div>
<style>
    .mr-4 {
        margin-right: 1em
    }

    .pr-4 {
        padding-right: 1em
    }
</style>
@section Scripts{
    <script>
        $(document).ready(function () {

            var objetoSupervisor = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject((Dictionary<string, string>)ViewData["Matriculas"]));

            //Cria código usuário
            $('#Matricula').blur(function () {
                var alfabeto = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];
                var matricula = $(this).val().toString();

                if (matricula == "") {
                    core.notify.showNotify("Esta campo não permite letras, apenas numeros",'error','top-center');
                    $(this).val('');
                    return;
                }

                if (matricula.length > 0) {
                    var codMatricula = alfabeto[parseInt(matricula[0]) - 1].toLocaleLowerCase() + matricula.substring(1);
                    $('#NomeUsuario').val(codMatricula);
                }
            });

            //Adiciona o usuario como gestor caso o perfil seja master
            $(document).on('change', "#PerfilId",function () {
                var nome = $('#Nome').val();
                var perfilId = $(this).val();

                if ((perfilId == "1" || perfilId == 2) && nome != "") {
                    var options = $('#NomeSupervisor option');
                    $.each(options, function (i, v) {
                        var teste = "";
                        if (v.text.toLowerCase() == nome.toLowerCase()) {
                            $(this).remove();
                        }
                    });

                    $('#NomeSupervisor').append(`<option value="${nome.toUpperCase()}">${nome.toUpperCase()}</option>`);
                } else {
                    var options = $('#NomeSupervisor option');
                    $.each(options, function (i, v) {
                        var teste = "";
                        if (v.text.toLowerCase() == nome.toLowerCase()) {
                            $(this).remove();
                        }
                    });
                }
            });

            //Seta matricula do supervisor selecionado
            $('#MatriculaSupervisor').val(objetoSupervisor[$('#NomeSupervisor').val()]);

            //Seta matricula do supervisor selecionado quando alterado
            $(document).on('change', '#NomeSupervisor', function (e) {
                var supervisorSelecionado = $(this).val();
                var nome = $('#Nome').val().toUpperCase();

                if (supervisorSelecionado in objetoSupervisor) {
                    $('#MatriculaSupervisor').val(objetoSupervisor[supervisorSelecionado]);
                } else {
                    var matricula = $('#Matricula').val();
                    $('#MatriculaSupervisor').val(matricula);
                }
            });

            $('form').submit(function (e) {
                //Coloca o nome em maiusculo.
                var nome = $(this).find('#Nome').val();
                $(this).find('#Nome').val(nome.toUpperCase());
            });
        })

    </script>
    @Scripts.Render("~/bundles/jqueryval")

}